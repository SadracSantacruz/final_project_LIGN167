Lab 02
Total Points: 10 (Correctness) + 1 extra credit (optional)


Due: Monday, October 14th, 11:59pm
Starter Files
Download lab02.zip. Inside the archive, you will find starter files for the questions in this lab. You can't import anything to solve the problems.
Extra Credit Opportunity


Starting from lab02, you will have the opportunity to receive a 1 point extra credit on that lab if you submit your last attempt early (refer to this section of each lab for the early submission deadline). Note: Each lab is graded out of 10 points, and you could possibly have more than 10 points in one lab.


Early Submission Date (lab02): Friday, October 11th, 11:59pm (SD time)


Logistics
Using Python
When running a Python file, you can use the options on the command line to inspect your code further. Here are a few that will come in handy. If you want to learn more about other Python command-line options, take a look at the documentation. For all commands below, use py instead of python3 if you are using a Windows system.
* Using no command-line options will run the code in the file you provide and return you to the command line.
>>> python3 lab02.py
* -i: The -i option runs your Python script, then opens an interactive session. In an interactive session, you run Python code line by line and get immediate feedback instead of running an entire file all at once. To exit, type exit() into the interpreter prompt. You can also use the keyboard shortcut Ctrl-D on Linux/Mac machines or Ctrl-Z Enter on Windows.
If you edit the Python file while running it interactively, you will need to exit and restart the interpreter in order for those changes to take effect.
>>> python3 -i lab02.py
* -m doctest: Runs doctests in a particular file. Doctests are surrounded by triple quotes (""") within functions. Each test consists of >>> followed by some Python code and the expected output.
>>> python3 -m doctest lab02.py
After finishing each question, please run the doctests using the command above to check the correctness of the current question.
Important Requirements and Notes 


   1. DO NOT IMPORT ANY PACKAGES.
   2. For all questions, only basic loops (for/while) and/or conditional statements (if/elif/else), NO list comprehension (will be covered in future lectures). Other built-in methods are allowed.
   3. Style is not required or graded on any labs, but it’s recommended that you also follow the style guide for clean code. We have provided method descriptions in this lab as examples for the homework docstring requirement.
   4. It will be useful to add doctests since the given doctests do not cover all cases, but you are not required to add doctests in labs.
   5. You will be graded solely on hidden tests, so make sure to test your code thoroughly.
   6. You may assume all inputs are valid.




Required Questions
Question 1:


Everyone has their own office, and now we need to place nameplates on the doors. Unfortunately, some names are too long, so we need to shorten them.
Write a function that takes a list of strings (people's names) and returns:
   * A new list where the first and last characters of each name are removed.
   * If a name has fewer than 3 characters, return ‘new name is needed’ for that entry.
   * If the input list is empty, return an empty list.


Hint: String slicing may be useful.


def name_plates(names):
    Removes first and last character of each name, or 'new name is 
    needed' if name is less than 3 characters.
    --
    Parameters:
        names: list of strings
    --
    Returns:
        A list of new names generated based on rule above


    >>> names = ["Marina", "Ty", "Jane Doe"]
    >>> name_plates(names)
    ['arin', 'new name is needed', 'ane Do']
    >>> names = ["Charisse Hao", 'Nicole Zhang ']
    >>> name_plates(names)
    ['harisse Ha', 'icole Zhang']
    >>> names = ['', 'ML']
    >>> name_plates(names)d
    ['new name is needed', 'new name is needed']
    """




Question 2:


The names on the nameplates are still too long, so we need to keep shortening them.


Question 2.1:


Write a function that takes a list of tuples, where the first element of each tuple is a string (last name), and the second element is a positive integer: the number of characters to remove from front and back, respectively. Assume each tuple will have this format.


Your function should create a new list with new tuples in it: 
   * If there are not enough characters to remove, then use ‘too short’ to replace the first element of the tuple, and 0 to replace the second element of the tuple. 
   * If the input list is empty, return an empty list.
   * Otherwise, keep the tuple intact.


Hints:
   * Since you can not modify a tuple, you may want to create a new empty list to store the values of new tuples.


def checking_length(names):
    """
    Create a copy list of tuples, replace name with 'too short'
    and the number with 0 if there are not enough characters to remove.
    --
    Parameters:
        names: a list of tuples of the format (<string>, <int>)
    --
    Returns:
        A new list of tuples with original tuples changed or replaced.


    >>> names = [("Cardiff", 4), ("Doe", 1), ("Rogers", 3), \
('Stark', 2), ('', 4)]
    >>> checking_length(names) 
    [('too short', 0), ('Doe', 1), ('Rogers', 3), ('Stark', 2), \
('too short', 0)]
    >>> names = [("Cardiff", 2), ("Bond", 4), ("Odinson", 6), \
('Strange', 8), ('Danvers', 2)]
    >>> checking_length(names)
    [('Cardiff', 2), ('too short', 0), ('too short', 0), \
('too short', 0), ('Danvers', 2)]
    >>> names = []
    >>> checking_length(names)
    []
    """
 
Question 2.2:


Now let’s actually solve the problem but now you have a list of lists instead of tuples. 


Write a function that takes a list of lists, where each list contains strings (names). It also takes a positive integer: `threshold`, the number of characters to remove from front and back, respectively.


Your function should return the original list of lists, with `threshold` characters removed in the names. 
   * If there are not enough characters to remove, then use ‘too short’ instead. 
   * If an element is ‘too short’ after a previous method call, leave it as is rather than further reducing its length.
   * If the input list is empty, return an empty list.


Examples: 
   1. When a string inside an inner list is ‘DSC20’ and threshold is 3, then we cannot remove 3 characters from both front and back, so ‘too short’ is used; when threshold is 2, there are enough characters, so we get ‘C’ as the answer for this string.
   2. If we have ‘EVEN’ and threshold is 2, there are still enough characters to take (4 >= 2 * 2), so an empty string is left. See doctests for details.


Note: You should directly change the input lists. In other words, you should NOT create new lists and return the new one.


Hints:
   1. Nested loops might be helpful here. I made a video explaining the idea of the nested loops. Link
   2. You can update the original list by using index: list[index] = new_value.


Example:
Input
	Output
	Reason
	>>> names = [["Cardiff", "Marina Langlois", "James Bond"], ['Barbie ', 'Batman']]


>>> remove_characters(names, 1)
	[['ardif', 'arina Langloi', 'ames Bon'], ['arbie', 'atma']]
	Removing 1 character from both the front and the end of each element in names.
	>>> remove_characters(names, 4)
	[['too short', 'a Lan', ''], ['too short', 'too short']]
	After running the 1st doctest, many_places has been updated and is the same as the output of the first doctest. 


Now, names = [['ardif', 'arina Langloi', 'ames Bon'], ['arbie', 'atma']]


Removing 4 characters from both the front and the end results in [['too short', 'a Lan', ''], ['too short', 'too short']].
	>>> remove_characters(names, 5)


	[['too short', 'too short', 'too short'], ['too short', 'too short']]
	Removing 5 characters from both the front and the end from the output of the 2nd doctests results in ‘too short’ for every element except the second one.
	



def remove_characters(names, threshold):
    """
    Removes `threshold` number of first and last characters from each
    name in inner lists, or 'too short' if there are not enough characters.
    --
    Parameters:
        names: a list of list(s) of names
        thresholds: a positive integer
    --
    Returns:
        The modified original list with characters removed or replaced


    >>> names = [["Cardiff", "Marina Langlois", "James Bond"], \
['Barbie ', 'Batman']] 
    >>> remove_characters(names, 1) 
    [['ardif', 'arina Langloi', 'ames Bon'], ['arbie', 'atma']]
    >>> remove_characters(names, 4) 
    [['too short', 'a Lan', ''], ['too short', 'too short']]
    >>> remove_characters(names, 5) 
    [['too short', 'too short', 'too short'], ['too short', 'too short']]
    """




Question 3:


You need to determine when to schedule food service, so you asked everyone on your team to choose a preferred time: 'M' for morning or 'A' for afternoon. A new list of lists was then created, with each inner list containing two strings—the name and the chosen time.


Write a function that takes a list of lists, starts with an empty list, and builds a new list by adding capitalized names. However, as soon as a time other than 'M' or 'A' is encountered, stop iterating and return the current version of the output. If the input list is empty, return an empty list. 


Question Requirements: 
   1. Only while loops and/or conditional statements (if/elif/else).
   2. NO list comprehension or lambda (both will be covered in future lectures)
   3. NO for loops allowed. You will NOT get credit for this question if any for loop is used.


Hints:
   1. When using the while loop, think about how to access the list elements using indices;
   2. Either break or continue may be helpful in the while loop. Think about which one.


def time_for_food(choices):
    """
    Returns a list with capitalized names with preferred time that is 
    either 'A' or 'M'.
    Start from empty list and return immediately if a time that is not 
    'A' or 'M' is found.
    --
    Parameters:
        choices: a list of lists of the form [<str>, <str>], with name 
            and time
    --
    Returns:
        A new list with the name(s) capitalized


    >>> choices = [["Marina", "A"], ["Jessica", "M"], ["Anish", "M"]]
    >>> time_for_food(choices)
    ['MARINA', 'JESSICA', 'ANISH']
    >>> choices = [["Batman", "A"], ["James", "m"], \
    ["Jay Gatsby", "O"]]
    >>> time_for_food(choices)
    ['BATMAN']
    >>> choices = [["James", "O"], ["Marina", "A"], ["Bond", "M"]]
    >>> time_for_food(choices)
    []
    """




Question 4:


You could not decide how many people prefer to eat in the morning, so someone suggested using a function that generates such a number.  


Write a function that takes two parameters: 
   * A string with names separated by exactly one space. 
   * Exactly one character. 


This function returns the number of names that end with the given character, where the second-to-last character must be alphabetic. 


Assumptions:
   * Assume the input string format is always correct.
   * Assume all names are at least 2 characters long and do not start or end with whitespace.


Examples:


Input
	Output
	Reason
	input_string: "Marina Langlois Anya Willy Wonka"
last_character: 'a'
	3
	Marina, Anya, Wonka end with an 'a' and the characters before the last 'a' are alphabetic ('n', 'n','y','j')
	input_string: "Marina Henry Monica Louis@a"
last_character: 'a'
	2
	Marina, Monica, Louis@a end with an 'a' but only two characters before the last 'a' are alphabetic ('n','c'). '@' is not alphabetic
	

Hints: 
   * built-in method split() is VERY useful when you work with strings.
   * built-in method isalpha() is helpful for this question.


def morning_people(input_string, last_character):
    """
    Finds number of strings ending with `last_character` and second 
    last is alphabetic.
    --
    Parameters:
        input_string: string of names separated by one space
        last_character: a character to match with the last character
            of each name
    --
    Returns:
        The number of people satisfying condition


    >>> input_string = "Marina Langlois Anya Willy Wonka"
    >>> morning_people(input_string, 'a')
    3
    >>> input_string = "Marina Henry Monica Louis@a"
    >>> morning_people(input_string, 'a')
    2
    >>> input_string = "Maria An@ns !reys James"
    >>> morning_people(input_string, 's')
    3
    >>> input_string = "Marin! Langloi!!!"
    >>> morning_people(input_string, '!')
    1
    """


Question 5:


This question presents a series of small problems to help you become familiar with the powerful data structure: the dictionary. 


We will work with a dictionary in which each key represents a dish and each value is a list of ingredients for that dish, as shown below:


{"Tacos": ["Spices","Beef","Salsa"], "Omelet": ["Eggs","Milk","Salt","Butter"]}
	

Question 5.1:


Write a function that takes the dictionary described above and returns the number of dishes it contains.


def question_1(dishes):
    """
    Finds the number of dishes
    --
    Parameters:
        dishes: dictionary with dishes as keys and ingredients as values
    --
    Returns:
        The total number of dishes


    >>> recipe1 = {"Tacos": ["Spices","Beef", "Salsa"], \
"Omelet": ["Eggs","Milk", "Salt", "Butter"]}
    >>> question_1(recipe1)
    2
    >>> recipe2 = {}
    >>> question_1(recipe2)
    0
    >>> recipe3 = {"Salad": [], "Hotpot": [], "Burger": ["Beef", \
"Buns", "lettuce"]}
    >>> question_1(recipe3)
    3
    """




Question 5.2:


Write a function that takes a dictionary described above and returns the list of all dishes.


def question_2(dishes):
    """
    Finds the list of all dishes
    --
    Parameters:
        dishes: dictionary with dishes as keys and ingredients as values
    --
    Returns:
        A list of all dish names


    >>> recipe1 = {"Tacos": ["Spices","Beef", "Salsa"], \
"Omelet": ["Eggs","Milk", "Salt", "Butter"]}
    >>> question_2(recipe1)
    ['Tacos', 'Omelet']
    >>> recipe2 = {}
    >>> question_2(recipe2)
    []
    >>> recipe3 = {"Salad": [], "Hotpot": [], "Burger": ["Beef", \
"Buns", "lettuce"]}
    >>> question_2(recipe3)
    ['Salad', 'Hotpot', 'Burger']
    """




Question 5.3:


Write a function that takes a dictionary described above and returns the number of ingredients for the dish with the least amount of ingredients.  If there are no dishes, return a 0.


def question_3(dishes):
    """
    Finds the number of ingredients of the dish with least ingredients.
    If no dish, return 0.
    --
    Parameters:
        dishes: dictionary with dishes as keys and ingredients as values
    --
    Returns:
        The least number of ingredients


    >>> recipe1 = {"Tacos": ["Spices","Beef", "Salsa"], \
"Omelet": ["Eggs","Milk", "Salt", "Butter"]}
    >>> question_3(recipe1)
    3
    >>> recipe2 = {}
    >>> question_3(recipe2)
    0
    >>> recipe3 = {"Salad": [], "Hotpot": [], "Burger": ["Beef", \
"Buns", "lettuce"]}
    >>> question_3(recipe3)
    0
    """


Question 5.4:


Write a function that takes a dictionary described above and returns a dish with the most number of ingredients. 
   * If there is a tie , return the last dish
   * If there are no dishes, return an empty string.


def question_4(dishes):
    """
    Finds the name of the dish with the most number of ingredients.
    If there is a tie, return the last one.
    --
    Parameters:
        dishes: dictionary with dishes as keys and ingredients as values
    --
    Returns:
        The name of the dish.


    >>> recipe1 = {"Tacos": ["Spices","Beef", "Salsa"], \
"Omelet": ["Eggs","Milk", "Salt", "Butter"]}
    >>> question_4(recipe1)
    'Omelet'
    >>> recipe2 = {}
    >>> question_4(recipe2)
    ''
    >>> recipe3 = {"Salad": [], "Hotpot": [], "Burger": []}
    >>> question_4(recipe3)
    'Burger'
    """




Question 5.5:


Write a function that takes a dictionary described above and the name of a dish. Your function should return an updated dictionary with a new dish added as a key. Note, the dishes are case-sensitive.
   * If the dish already exists, do nothing (leave the dictionary as is). 
   * If the dish is new, then add an empty list as a corresponding value.


Return the updated dictionary.


Hint: You could use ‘dictionary[key] = value’ to create a key, value pair in the dictionary or update the value associated with ‘key’. You could also use update(), but be aware that it’s a function which updates the dictionary and returns None, similar to list.append().


def question_5(dishes, dish):
    """
    Adds new dish to current dictionary of dishes. If dish already exists, 
    do nothing; if the dish does not yet exist in dictionary, add empty 
    list as its value.
    --
    Parameters:
        dishes: dictionary with dishes as keys and ingredients as values
        new_dish: string name of dish
    --
    Returns:
        Updated dictionary with new dish


    >>> recipe1 = {}
    >>> question_5(recipe1, 'Burger')
    {'Burger': []}
    >>> recipe2 = {'Omelet': ["Eggs","Milk", "Salt", "Butter"]}
    >>> question_5(recipe2, 'Omelet')
    {'Omelet': ['Eggs', 'Milk', 'Salt', 'Butter']}
    >>> question_5(recipe2, 'Salad')
    {'Omelet': ['Eggs', 'Milk', 'Salt', 'Butter'], 'Salad': []}
    """




Question 5.6:


Write a function that takes:
   * A dictionary described above
   * A new dish (as a string)
   * A new ingredient (as a string)


Your function returns an updated dictionary where new_dish becomes a key and an ingredient is added to the corresponding value list. If the dish already exists in the dictionary, update its value list instead. Finally, return the updated dictionary.


def question_6(dishes, new_dish, ingredient):
    """
    Adds ingredient to the list of ingredients of `new_dish` in 
    the dictionary if it exists; if not, create a list as value 
    with the ingredient as an element.
    --
    Parameters:
        dishes: dictionary with dishes as keys and ingredients as values
        new_dish: string dish name
        ingredient: string 
    --
    Returns:
        The updated dictionary.


    >>> recipe1 = {}
    >>> question_6(recipe1, 'Salad', 'tomato')
    {'Salad': ['tomato']}
    >>> recipe2 = {'Salad': ['tomato']}
    >>> question_6(recipe2, 'Salad', 'chicken')
    {'Salad': ['tomato', 'chicken']}
    >>> recipe3 = {'Salad': ['tomato']}
    >>> question_6(recipe3, 'Salad', 'tomato')
    {'Salad': ['tomato', 'tomato']}
    """




Question 5.7:


Write a function that takes a dictionary described above and the ingredient. Your function should return an updated dictionary with this ingredient removed from every dish. Return the updated dictionary.


Notes:
   * It is possible to have multiple ingredients with the same name in different dishes.
   * However, there will be at most one ingredient with this name inside a single list.
   * Optional: Try to figure out on your own how to solve this problem if more than one ingredient exists in a list. 


def question_7(dishes, ingredient):
    """
    Removes `ingredient` from all lists of ingredients in `dishes` if 
    exists in list.
    --
    Parameters:
        dishes: dictionary with dishes as keys and ingredients as values
        ingredient: string
    --
    Returns:
        Updated dictionary


    >>> recipe1 = {'Salad': ['tomato']}
    >>> question_7(recipe1, 'arugula')
    {'Salad': ['tomato']}
    >>> recipe2 = {'Salad': ['tomato', 'kale', 'spinach']}
    >>> question_7(recipe2, 'kale')
    {'Salad': ['tomato', 'spinach']}
    >>> recipe3 = {'Salad': ['tomato', 'spinach'], 'Burger': ['tomato']}
    >>> question_7(recipe3, 'tomato')
    {'Salad': ['spinach'], 'Burger': []}
    """






Question 6:
A morning does not start without a cup of coffee or tea! So the lounge room needs a password. 
The goal is to create a function that processes names and associated codes according to specific rules to generate a password to the lounge room with the coffee/tea machine.
Write a function that takes a dictionary where names are the keys (as strings) and their associated codes are the values. The password is created based on the following rules:
   * If the code is a string, and its length is even, reverse the corresponding name.
   * If the code is a non-negative integer, generate a string consisting of '#' characters with the length equal to the length of the corresponding name.
   * If the code is a negative integer, extract and include the first character of the corresponding name.
   * For all other types of codes, exclude the name from the final encoded message.
The function will return a concatenated string of the encoded phrases generated at each step. Check the provided example and doctests for clarity.
Note: 
   * If an empty dictionary is passed into the function, return an empty string.
   * Keys can be empty strings.


Example


>>> dict1 = {'Adrian': 'haha', 'Marina': 2, 'Langlois': 0, 'Walter': -1}
>>> secret_language(dict1)
    'nairdA##############W'




Team Name: Message
	Collected Output
	Explanation
	'Adrian': 'haha'
	nairdA
	First case, since the message 'haha' is a string, and the length of it is even. Add the team name backwards.
	'Marina': 2
	nairdA######
	Second case, since the message 2 is a non-negative integer. Add 6 hashtags.
	'Langlois': 0
	nairdA##############
	Second case, since the message 0 is a non-negative integer. Add 5 hashtags.
	'Walter': -1
	nairdA##############W
	Third case, since the message -1 is a negative integer. Add n.
	



def password_to_lounge(names_dict):
    """
    Constructs secret language based on 3 rules:
    (1) If code is even-length string, reverse name;
    (2) If code is non-negative integer, add X `#` where X is name length;
    (3) If code is negative integer, get first character of name.
    --
    Parameters:
        names_dict: dictionary of names as keys and code as values
    --
    Returns:
        A password generated based on rules above.


    >>> dict1 = {'Adrian': 'haha', 'Marina': 1, \
'Langlois': 0, 'Walter': -2}
    >>> password_to_lounge(dict1)
    'nairdA##############W'
    >>> dict2 = {'Ty': 'dsc', '': 20}
    >>> password_to_lounge(dict2)
    ''
    >>> dict3 = {'M.L.': 5, 'DSC20': 'ab'}
    >>> password_to_lounge(dict3)
    '####02CSD'
    """


Submission
You need to submit the lab via Gradescope. You may submit more than once before the deadline; only the final submission will be graded.
Follow these steps to submit your work.
Important: If you used Visual Studio Code as your editor, please double check if there are weird import statements that you don’t recognize before submitting. Make sure to remove these as they will fail Gradescope runs!