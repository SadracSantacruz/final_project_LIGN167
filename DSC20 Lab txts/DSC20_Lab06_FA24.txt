Lab 06: Complexity and Arguments


Total Points: 10 (Correctness) + 1 extra credit (optional)
Due: Monday, November 11th, 11:59 pm


Extra Credit Opportunity


You have the opportunity to receive a 1 point extra credit on that lab if you submit your last attempt early (refer to this section of each lab for the early submission deadline). Note: Each lab is graded out of 10 points, and you could possibly have more than 10 points in one lab.


Early Submission Date (Lab06): Friday, November 8th, 11:59pm


Starter Files
Download lab06.zip. Inside the archive, you will find starter files for the questions in this lab. You can't import anything to solve the problems.
Submission
By the end of this lab, you should have submitted the lab via Gradescope. You may submit more than once before the deadline; only the final submission will be graded.
Testing
After finishing each question, run the file with the following command-line options to avoid compile-time errors and test the correctness of your implementation:
* No options: >>> python3 lab05.py
* Interactive mode:  >>> python3 -i lab05.py
* Doctest (Recommended): >>> python3 -m doctest lab05.py
For Windows users, please use py or python instead of python3.
________________


Important Requirements and Notes


1. DO NOT IMPORT ANY PACKAGES.
2. It may be useful to add doctests when the given doctests do not cover all cases to avoid losing points from the Autograder/any hidden tests, but you are not required to add doctests in the labs.
3. Style/asserts are not required or graded on any labs, but it’s recommended that you also follow the style guide for clean code. Method descriptions are provided in this lab.
4. You may assume all inputs are valid.






Question 1:




Continuing with the concept of complexity, recall the order of common time complexities:


1. O(1) - constant time
2. O(log n) - logarithmic time
3. O(log n)k, k>1 - Poly-log time
4. O(n) - linear time
5. O(n log n) - linearithmic time
6. O(n2) - quadratic time
7. O(n3), O(n4), etc. - polynomial time
8. O(an), a > 1 - exponential time
9. O(n!) - factorial time (n! = 1 * 2 * … * n)
10.  None of the above


Read the source code of 10 python functions, and judge the time complexity of them. Write your answer (as the order 1 - 9, duplicates allowed, each number may or may not be used) in the complexity_mc() function, which returns your answers as a list of 10 integers. In this list, write your answer to the first function at index 0, second function at index 1, etc. 


For example: 


def example(n):
    s = 0
    for i in range(5, n+1):
        s = s + 1
Explanation (simplified but the complexity is still the same) (you do not have to write it but make sure you understand your choice):


* There is  1 instruction that assigns a 0 to a variable s. 
* Also there is a single loop that runs n−4 times. 
   * Each time the loop runs it executes 1 instruction in the loop header and 1 instruction in the body of the loop. 
* The total number of instructions is 1 + 2 ∗ (n − 4) + 1 (for the last loop check) = 2n − 6  = O(n)


For more examples: click here


Please note:  Java syntax is used in their loops. You can read it as:


Java
	Python
	for (int i = 0; i < n; i=i+1)


* i is initialized to a 0. 
* if i is less than n, perform one iteration of the loop
* increment i by 1, check if i is less than n.
   * If it is, run the loop again etc; 
   * If i is greater than n, stop the loop. 
	for i in range(0, n)


Equivalent loop in Python
	

Notes: 
1. For each function, if its parameter is n, you can assume it's a non-negative and super large integer; if its parameter is a list (lst), you can assume n is the length of this list, also super large.
2. The doctests for this question are sanity checks, only indicating that you have put answers of the correct form.


def complexity_mc():
"""
Write your answers to time complexity multiple-choice questions
in this function. You don't need to add new doctests for this function.
>>> answers = complexity_mc()
>>> isinstance(answers, list)
True
>>> len(answers)
10
>>> all([isinstance(ans, int) and 1 <= ans <= 10 for ans in answers])
True
"""


    # REPLACE ... WITH YOUR ANSWERS (1-10, duplicates allowed) #
    return [...]


Question 2:


The business that your team creates also wants to organize fun activities for employees' children, but you need to know how many adults should assist. We will assume that for every three children up to and including a certain age, one adult must be present.


Question 2.1:


Write a function that takes a list of ages, with a default age parameter set to 18, and returns the number of adults needed for travel.


Requirement: one-line list comprehension. You are allowed to declare a helper function if needed. 


def number_of_adults_1(lst, age = 18):
"""
For every three children younger than the given age threshold, 
one adult is needed.
---
Parameters:
- lst (list of integers): Ages of children
- age (integer): Age threshold
___
Returns:
int: Number of adults needed.


>>> number_of_adults_1([1,2,3,4,5,6,7])
3
>>> number_of_adults_1([1,2,3,4,5,6,7], 5)
2
>>> number_of_adults_1([1,2,3,4,5,6,7], age = 2)
1
"""


Question 2.2:


Write a function that takes an unspecified number of ages and returns the number of adults needed for travel, using 18 as the age threshold.


Requirement: one-line list comprehension. You are allowed to reuse a helper function if needed. 


def number_of_adults_2(*args):
"""
For every three children younger than the given age 
threshold, one adult is needed.
--- 
Parameters:
*args (int): A variable number of integer
ages to check. Each integer represents the 
age of an individual.
---
Returns:
int: Number of adults needed.


>>> number_of_adults_2(1,2,3,4,5,6,7)
3
>>> number_of_adults_2(10,20,13,4)
1
>>> number_of_adults_2(19, 20)
0
"""


Question 2.3:


Write a function that takes an unspecified number of ages, with a default age parameter set to 18, and returns the number of adults needed for travel.


def number_of_adults_3(*args, age = 18):
"""
For every three children younger than the given age 
threshold, one adult is needed.
--- 
Parameters:
- *args (int): A variable number of integer
ages to check. Each integer represents the 
age of an individual.
- age (int): Age threshold, defaulted to 18.
---
Returns:
int: Number of adults needed.
    
>>> number_of_adults_3(1,2,3,4,5,6,7)
3
>>> number_of_adults_3(1,2,3,4,5,6,7, age = 5)
2
>>> number_of_adults_3(1,2,3,4,5,6,7, age = 2)
1
"""


Question 3:


Write a function that takes a proposed activity (as a string) and a variable number of children (each represented by their name and a list of activities they wish to participate in). 


The function should return a list of tuples, where each tuple contains the child's name and a boolean value indicating whether or not the child will participate in the proposed activity. The check should not be case-sensitive.


Requirement: one-line list comprehension.


def activities_of_children(activity, **kwargs):
"""
Determines which children will participate in a given activity.
---
Parameters:
- activity (str): The activity to check participation for.
- **kwargs: Variable keyword arguments where each key is a
child's name and each value is a list of activities the 
child is interested in.
---
Returns:
list of tuples: Each tuple contains the child's name
and a boolean indicating whether the child will participate
in the specified activity.


>>> activities_of_children("soccer", Marina = ['soccer', \
'basketball', 'tennis'], Rob = ['swimming', 'tennis'], \ 
Adrian = ['tennis', 'soccer', 'volleyball'])
[('Marina', True), ('Rob', False), ('Adrian', True)]


>>> activities_of_children("swimming", Sam = ['soccer', \
'swimming', 'tennis'], \
Yue = ['volleyball', 'tennis'], \
Pooja = ['badminton', 'running'])
[('Sam', True), ('Yue', False), ('Pooja', False)]


>>> activities_of_children("tennis", Karina = [], \
Else=['soccer', 'swimming'], \
David=['basketball', 'running'], \
Yacun=['tennis', 'badminton'])
[('Karina', False), ('Else', False), ('David', False), ('Yacun', True)]


>>> activities_of_children("basketball")
[]
"""


Question 4:


Write a function that takes a target character and reads multiple files, returning the total count of the target character across all files. The search should be case-insensitive. The file paths and target character will always be valid.


def files_target_count(target, *args):
"""
Get count of the target character across all files.
Not case sensitive.
---
Parameters:
        - target (str): the target character
        - *args: unspecified number of file names as strings
---
Returns:
        - int: Target character count across all files.


>>> files_target_count('e', 'files/file1.txt', 'files/file2.txt')
5
>>> files_target_count('\\n', 'files/file1.txt', \
'files/file2.txt')
10
>>> files_target_count('E', 'files/file1.txt', 'files/file2.txt')
5
>>> files_target_count('', 'files/file1.txt', 'files/file2.txt')
0
>>> files_target_count('e', 'files/file1.txt', \
'files/file2.txt', 'files/file3.txt', 'files/file4.txt')
99
>>> files_target_count('\\n', 'files/file2.txt', \
'files/file4.txt', 'files/file3.txt')
26
"""


Question 5:


The field trip is approaching, and it is time to decide how many parents should be invited to help. Each group has its own ID and a list of the ages of the children in that group. Write a function that takes keyword arguments where each keyword is a group ID, and the corresponding value is a list of the children's ages in that group. Return a dictionary where each key is a group ID, a value is the number of adults needed for this group.


Hints:
* You may want to call number_of_adults_3() above.
* Asterisk operator (*) helps you unpack a list into function arguments.




def field_trip(age_limit, **kwargs):
"""
Determines the number of adults needed for each group based
on the age limit. For every three children younger than the
specified age limit, one adult is needed.
---
Parameters:
- age_limit (int): The maximum age considered as a child.
- **kwargs: Variable keyword arguments where each key is 
a group ID, and the value is a list of children's ages in 
that group.
---
Returns:
dict: A dictionary where each key is a group ID, and the 
value is the number of adults required for that group.


>>> field_trip(14, group1 = [1, 2, 3], group2 = [4, 5, 6, 7], \
group3=[15, 16])
{'group1': 1, 'group2': 2, 'group3': 0}


>>> field_trip(14, group1 = [21, 3], group2 = [41, 1, 2, 24, 6], \
group3=[30, 3, 1, 7, 88])
{'group1': 1, 'group2': 1, 'group3': 1}


>>> field_trip(100, group1 = [21, 3], group2 = [41, 1000, 2, 24, 6], \
group3 = [3, 1, 7, 88])
{'group1': 1, 'group2': 2, 'group3': 2}
    """


Submission:
By the end of this lab, you should have submitted the lab via Gradescope. You may submit more than once before the deadline; only the final submission will be graded.