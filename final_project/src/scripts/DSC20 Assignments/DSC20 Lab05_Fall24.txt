Lab 05: Higher-Order Functions


Total Points: 10 (Correctness) + 1 extra credit (optional)
Due: Monday, November 4th, 11:59 pm


Extra Credit Opportunity


You have the opportunity to receive a 1 point extra credit on that lab if you submit your last attempt early (refer to this section of each lab for the early submission deadline). Note: Each lab is graded out of 10 points, and you could possibly have more than 10 points in one lab.


Early Submission Date (lab05): Thursday, October 31st, 11:59pm


Starter Files
Download lab05.zip Inside the archive, you will find starter files for the questions in this lab. You can't import anything to solve the problems.
Submission
By the end of this lab, you should have submitted the lab via Gradescope. You may submit more than once before the deadline; only the final submission will be graded.
Testing
After finishing each question, run the file with the following command-line options to avoid compile-time errors and test the correctness of your implementation:
* No options: >>> python3 lab05.py
* Interactive mode:  >>> python3 -i lab05.py
* Doctest (Recommended): >>> python3 -m doctest lab05.py
For Windows users, please use py or python instead of python3.
________________


Important Requirements and Notes


1. DO NOT IMPORT ANY PACKAGES.
2. It may be useful to add doctests when the given doctests do not cover all cases to avoid losing points from the Autograder/any hidden tests, but you are not required to add doctests in the labs.
3. Style/asserts are not required or graded on any labs, but it’s recommended that you also follow the style guide for clean code. Method descriptions are provided in this lab.
4. You may assume all inputs are valid.


Introduction
A Higher-Order Function (HOF) is a function that manipulates other functions by taking in functions as arguments, returning a function, or both. Here is an example of how higher-order functions may be used in Python.
def higher_order(f, x):
    return f(x)**2


Important: The pre-defined functions below will be used throughout this write-up as helper methods to the doctests.


def identity(x):
    return x


def squared(x):
    return x**2


def cubed(x):
    return x**3


def root(x):
    return round(x ** 0.5, 2)
Required Questions


Question 1:


Linear algebra is important in the field of Data Science because vector operations can speed up computation when your dataset is huge. Two of your co-workers, Snoozer and Snacker, are struggling with linear algebra, so it’s time to help them with some vector operations.


Write a function that takes:
* a function    and 
* a vector    (for simplicity, we will use a list to represent a vector) and applies the function element-wise to the vector   .


For example, suppose your function    and your vector   = [1, 2, 3, 4]. What you do is building a new vector    of the same size as    such that   . Therefore, in our example, since   , and  
  
= [1, 2, 3, 4], we get the following: 


Requirement: Only one line list-comprehension


def vector_op(lst, func):
"""
Applies function to each element in the list
–-
Parameters:
lst: list of numbers
func: a function to be applied
--
Returns:
List of transformed numbers


>>> lst = [1, 2, 3]
>>> vector_op(lst, squared)
[1, 4, 9]
>>> lst = [1, 2, 3, 5]
>>> vector_op(lst, lambda x: -x)
[-1, -2, -3, -5]
>>> vector_op(lst, identity)
[1, 2, 3, 5]
>>> lst = [10, 20, 30]
>>> vector_op(lst, cubed)
[1000, 8000, 27000]
"""




Question 2:


At this moment, Snoozer and Snacker are able to perform vector operations. However, vectors are not the end of the story in linear algebra. They still need help with matrix operations.


Write a function that takes:
   * a function     and 
   * a matrix X (for simplicity, we will use a nested list to represent the matrix) and applies the function element-wise to the matrix X.


Note: You may use the vector_op function from the first question.


Requirement: Only one line list-comprehension


def matrix_op(lsts, func):
"""
Applies function to each element in the 2D list
--
Parameters:
lsts: list of lists of numbers
func: a function to be applied
--
Returns:
List of lists of transformed numbers


>>> lsts = [[1,2], [3,4]]
>>> matrix_op(lsts, squared)
[[1, 4], [9, 16]]
>>> lsts = [[10, 20], [30, 40]]
>>> matrix_op(lsts, lambda x: x / 10)
[[1.0, 2.0], [3.0, 4.0]]
>>> lsts = [[5,15], [25,35]]
>>> matrix_op(lsts, identity)
[[5, 15], [25, 35]]
"""




Question 3:


After finishing the implementation of the functions for both vector and matrix operations, Snoozer and Snacker discover that performing a single element-wise operation on the vector    is insufficient.


Write a function that takes:
      * a function    and 
      * a vector    (for simplicity, we will use a list to represent the vector) and applies the function element-wise to the vector    twice.


For example, if you have a vector  and your function is   , your new vector would be 





Requirement: Only one line list-comprehension


def hop_hop(lst, func):
"""
Applies function to each element in list twice
--
Parameters:
lst: list of numbers
func: a function to be applied
--
Returns:
List of transformed numbers


>>> lst = [1,2,3]
>>> hop_hop(lst, squared)
[1, 16, 81]
>>> lst = [5,6,7,8]
>>> hop_hop(lst, lambda x:x+1)
[7, 8, 9, 10]
>>> lst = [10,20,30]
>>> hop_hop(lst, cubed)
[1000000000, 512000000000, 19683000000000]
"""




Question 4:


Snoozer asked Snacker why they performed the operation only twice. It would make more sense to apply the operation multiple times!


Write a function that takes:
         * a function   , 
         * a vector    (for simplicity, we will use a list to represent the vector), 
         * an integer for the number of iterations


and applies the function element-wise to the vector for the specified number of iterations.


Note: You can assume the input is non-negative.


def hop_many(lst, func, iterations):
"""
Applies function to each element in list specified number of times
--
Parameters:
lst: list of numbers
func: a function to be applied
iterations: number of times to perform operation
--
Returns:
List of transformed numbers


>>> lst = [1,2,3]
>>> hop_many(lst, squared, 2)
[1, 16, 81]
>>> hop_many(lst, squared, 3)
[1, 256, 6561]
>>> hop_many(lst, identity, 100)
[1, 2, 3]
>>> hop_many(lst, lambda x: x - 1, 4)
[-3, -2, -1]
"""




Now let’s practice the idea of the nested functions: i.e. functions that are defined and used inside other functions. 


Question 5:


After the exam, Marina has a list of numbers and she wants to calculate either median, mean or both. In case you forgot how to calculate the median:
            1. Sort the list of given numbers (you can use a built-in function for it).
            2. Check if the number of elements in the list is even or odd.
            3. If odd, then return the value in the middle of the list.
            4. Otherwise, the median is the average of the two middle elements.


Write a function grades_stats() that calculates either median, mean or both based on the user’s choice. This function takes two parameters:
            * A list of integers
            * A positive integer, choice.
If the value of the parameter choice is:
            * 1: return the median of the list, 
            * 2: return the mean of the list, rounded to two decimal places
            * Otherwise, return both at once. 


Use nested functions find_median() and find_mean() inside grades_stats() to keep the logic organized.


def grades_stats(input_lst, choice):
"""
Calculates mean, median, or both stats for input list. `choice` is
1 for median, 2 for mean, and any other for both stats.
--
Parameters:
input_lst: list of integers
choice: positive integer representing each stat
--
Returns:
Stats of the input list


>>> lst = [3, 2, 1]
>>> grades_stats(lst, 1)
2
>>> grades_stats(lst, 2)
2.0
>>> grades_stats(lst, 0)
(2, 2.0)
>>> lst = [1, 2, 4]
>>> grades_stats(lst, 2)
2.33
>>> grades_stats(lst, -1)
(2, 2.33)
"""




Question 6:


After hard work, you team members decided to go shopping! Write a function calculate_final_price that takes three parameters:
            * original_price: The original price of the item.
            * category: The product category as a string (e.g., "electronics", "clothing", "home").
            * season: The current shopping season as a string (e.g., "Winter", "Summer", "Fall").
Within this function, you should implement the following:
            1. A nested function apply_category_discount to apply a discount based on the product’s category:
            * electronics: 10% off
            * clothing: 20% off
            * home: 5% off
            * other categories: No discount
            2. A nested function apply_seasonal_discount to apply a discount based on the season:
            * Winter: 15% off
            * Summer: 10% off
            * Fall: 5% off
            * Spring: No discount
The final price should be calculated by first applying the category discount, then applying the seasonal discount to the discounted price. The final price should be rounded to 2 decimal places.
Note: category and season are case-sensitive


def calculate_final_price(original_price, category, season):
"""
Calculates price of item after discount.
--
Parameters:
original_price: number representing price of item
category: string category of item that category discount is based
on
season: string season that seasonal discount is based on
--
Returns:
The final price of item after applying potential discounts


>>> calculate_final_price(120, 'electronics', 'Spring')
108.0
>>> calculate_final_price(45, 'clothing', 'Winter')
30.6
>>> calculate_final_price(100, 'appliance', 'Spring')
100
"""


Submission:
By the end of this lab, you should have submitted the lab via Gradescope. You may submit more than once before the deadline; only the final submission will be graded.