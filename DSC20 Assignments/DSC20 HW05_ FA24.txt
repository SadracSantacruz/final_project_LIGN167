Homework 5
Total Points: 100 (Correctness and Style) + 3 EC (Checkpoint)


Due Dates (SD time): 
* Entire Assignment: Monday, November 4th, 11:59pm
* Checkpoint (read below): Saturday, November 2nd, 11:59pm
Starter Files
Download hw05.zip. Inside the archive, you will find starter files for the questions of this homework. You cannot import anything to solve the problems.
IMPORTANT: Coding and Docstring Style
This is a reminder that your code style will be graded. Here are a few useful links:
Style Guide on Course Website
Style Guide Examples
Testing
At any point of the homework, use one of the following command to test your work:
>>> python3 -m doctest hw05.py
>>> py -m doctest hw05.py
>>> python -m doctest hw05.py
Checkpoint Submission
Due Date: Saturday, November 2nd, 11:59pm (SD time)  


You can earn up to 3 points extra credit by submitting the checkpoint by the due date above. In the checkpoint submission, you should complete Question 1 and 2 and submit the hw05.py file to gradescope. 


Checkpoint submission is graded by completion, which means you can get full points if your code can pass some simple sanity check (no tests against edge cases). Note that in your final submission, you should still submit these questions, and you may modify your implementation if you noticed any errors.
General Notes and Requirements
1. DO NOT IMPORT ANY PACKAGES.
2. Please add your own doctests (at least three) for Questions 1-3 as the given doctests are not sufficient. You will be graded on the doctests.
3. You do not need to add additional doctests for Question 4.
4. When a question (Questions 1, 2) requires assert statements: follow the assert guide to write assert statements to prevent any unexpected inputs. You will be graded on this. If a question does not require assert statements, assume all inputs are valid.




Question 1:
Imagine you’re designing a data analysis tool for your new business. You need to implement a function to help you filter and analyze customer data based on specific criteria.
Write a function that takes:
* a dictionary of customer data:
   * each key is a customer ID (as a string) 
   * each value is a list of integers representing numeric scores reflecting different metrics for each customer. 
* two positive integers, max_avg and min_range.
The function returns a list of all customer IDs that meet all of the following criteria:
For each customer’s metric list:
* The average score should be less than or equal to a specified max_avg.
* The range (difference between the largest and smallest score) should be greater than or equal to a specified min_range.
* There should be no duplicate scores in the list.
Hint:
* Write lambda functions that help calculate average and range
   * The average and range of an empty list should be 0
* To check for duplicates, consider using Python’s set data structure, which only keeps unique values.
Requirement: 
1. Assert statements. 
2. No explicit for loops. You must use either list/dictionary comprehensions or map/filter/lambda.
def get_qualified_customers(data, max_avg, min_range):
    """
    >>> data = { \
        "Jayden": [10, 10, 10, 10, 10], \
        "Terry": [1, 2, 3, 4, 5, 6, 7, 8], \
        "Austin": [10, 11, 12, 13, 14], \
        "Noah": [2, 3, 4, 5] \
    }
    >>> get_qualified_customers(data, 11, 5)
    ['Terry']


    >>> data = { \
        "Caleb": [0, 1, 2, 3, 4, 5], \
        "Keenan": [8, 9, 10], \
        "Rome": [7, 8, 9], \
        "Khalil": [] \
    }
    >>> get_qualified_customers(data, 9, 2)
    ['Caleb', 'Keenan', 'Rome']
    """
Question 2:
The key customers have now been selected, but you do not yet have enough resources to support them all. You have decided which customers will stay and which ones will have to wait. Your task is to write a letter informing customers of this decision.
Write a function message_to_customers() that accepts three parameters:
* customer_file: a text file where each line contains customer information in the format:
company_name,person_in_charge,email,decision
Here, the decision on each line can be either “s” (stays) or “w” (for waitlisted).
* decision: a string that is either “s” or “w”.
* message: a string to send.
Your function should return a list of messages to the customers based on the decision. If the decision is “s” you should send a message to all the customers who are staying. If the decision is “w” you should send a message to all the customers who are waitlisted.
Requirement: Assert statements. 
def message_to_customers(customer_file, decision, message):
    """
    >>> msg = "unfortunately we cannot work with you."
    >>> message_to_customers("files/customers.txt", "w", msg)
    ['(to: steve@apple.com) Dear Steve at Apple, unfortunately we cannot work with you.', \
'(to: jensen@nvidia.com) Dear Jensen at NVIDIA, unfortunately we cannot work with you.']


    >>> msg = "we are excited to work with you!"
    >>> message_to_customers("files/customers.txt", "s", msg)
    ['(to: jeff@amazon.com) Dear Jeff at Amazon, we are excited to work with you!', \
'(to: mark@fb.com) Dear Mark at Facebook, we are excited to work with you!']
    """
Question 3:


Your team always VOTES before making any decisions for the new business. (Democracy, Hoo, YeYahhh! :) )
However, there are two tricky team members, Snoozer and Snacker, who sometimes try to sway the vote in their favor. One day, their boss proposed a new initiative to perform a product demonstration during an important client review. Most team members felt it would be better to focus solely on the client presentation, so they voted “NO.” But Snoozer and Snacker wanted to see the product demonstration included, so they decided to manipulate the votes to ensure that the majority would vote “YES.”
In this scenario, a "majority" means strictly greater than 50%. Snoozer and Snacker want to change the fewest votes necessary to make “YES” the majority, all without being noticed (or they risk their positions!), so they have to forge the least amount of votes to make the “YES” become the majority.
Important: The above scenario is only an example to illustrate how vote forging works. Your goal is to implement a function that reads the current votes from a given file, forges the votes as needed to make it a majority “YES”, and writes the updated results to a new file (more details below).
Write a function that takes:
   * the file path to a .txt file where each line is in the following format: Name,Vote
Here, Name is the name of the co-worker, and Vote is either {0, 1}, where 0 represents “NO” and 1 represents “YES”
Your forge_votes() function should change the first few votes so that the majority currently favors Snoozer and Snacker. Leave everything unchanged if no forging is necessary.


Note: 
   * Write the updated votes to forged.txt


Assumptions: 
   * All names will consist of only letters.
   * All votes will be either 0 or 1. 


Hint: 
   * There are many ways to solve it but my steps were:
   * Extract names and votes into separate lists. 
   * Count the number of 1’s. 
   * Decide if there’s enough for a majority or not. 
   * Count how many votes are needed to reach a majority.
   * Use functions join and replace to swap 0’s to 1’s to achieve majority.
   * Construct a new string.
   * Write it to the output file. 
Requirement: No explicit for/while loops. You must use either list/dictionary comprehensions or map/filter/lambda. Think about reading the file using .readlines() and writing to the new file by creating one long string (think .join()).
def forge_votes(vote_file):
    """
    >>> forge_votes("files/vote1.txt")
    >>> with open("files/forged.txt", "r") as out:
    ...    for line in out:
    ...       print(line.strip())
    Patrick,1
    Travis,0
    Clyde,1
    Andy,1


    >>> forge_votes("files/vote2.txt")
    >>> with open("files/forged.txt", "r") as out:
    ...    for line in out:
    ...       print(line.strip())
    Maxx,1
    Tre,1
    Jakobi,0


    >>> forge_votes("files/vote3.txt")
    >>> with open("files/forged.txt", "r") as out:
    ...    for line in out:
    ...       print(line.strip())
    Andy,1
    """




Question 4:


Complexity is an important concept in coding as we want our code to be as efficient as possible. Judge if the following equations about complexity hold. Write your answer (True or False) in the complexity_tf() function, which returns your answers as a list of 10 boolean values. In this list, write your answer to the first equation at index 0, second equation at index 1, etc. 


Equation Format: f(x) = O(g(x))


(Note for students who have this question: We use big-O as a tight bound in DSC20, not upper bound). 


Examples:
   1.   True
   2.  False
   3.   False, since  is the tightest bound for .


Note: The doctests for this question are sanity checks, only indicating that you have put answers in the correct form.


Note: 


Equations:
      1.       2.       3.       4.       5.       6.       7.       8.       9.       10. 



def complexity_tf():
    """
    Write your answers to time complexity True/False questions in this
    Function. No new doctests required.


    >>> answers = complexity_tf()
    >>> isinstance(answers, list)
    True
    >>> len(answers)
    10
    >>> all([isinstance(ans, bool) for ans in answers])
    True
    """
    # REPLACE ... WITH YOUR ANSWERS (True/False) #
    return [...]




Submission
When submitting to Gradescope, you can include the files folder by compressing it with your hw05.py file, creating a .zip file you can submit that zip file to Gradescope. If you have your hw05.py and files folder inside of another folder, make sure that you select hw05.py and the files folder directly to compress it, rather than compressing the encompassing folder, as it will cause issues with your submission.
You can do this by going into File Explorer or Finder and selecting both the files folder and the hw05.py file. Right-click and then select either
Windows: Send to -> Compressed (zipped) folder 
Mac: Compress 2 items
Your .zip file should have the following files if you open it:
files/
--- vote1.txt
--- vote2.txt
--- ... (other files)
hw05.py
Please submit the homework via Gradescope. You may submit more than once before the deadline, and only the final submission will be graded. Please refer to the Gradescope FAQ if you have any issues with your submission.