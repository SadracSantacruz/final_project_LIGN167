Lab 08: Inheritance


Total Points: 10 (Correctness) + 1 extra credit (optional)
Due: Monday, November 25th, 11:59 pm


Extra Credit Opportunity


You have the opportunity to receive a 1 point extra credit on that lab if you submit your last attempt early (refer to this section of each lab for the early submission deadline). Note: Each lab is graded out of 10 points, and you could possibly have more than 10 points in one lab.


Early Submission Date (lab08): Friday, November 22th, 11:59pm
Starter Files
Download lab08.zip Inside the archive, you will find starter files for the questions in this lab. You can't import anything to solve the problems.
Submission
By the end of this lab, you should have submitted the lab via Gradescope. You may submit more than once before the deadline; only the final submission will be graded. Stay on the submission page until the results show, to make sure that your submission is successfully processed by the Autograder. If your submission fails, the tests are not able to run and you would receive a 0.
Testing
After finishing each question, run the file with the following command-line options to avoid compile time errors and test the correctness of your implementation:
* No options: >>> python3 lab08.py
* Interactive mode:  >>> python3 -i lab08.py
* Doctest (Recommended): >>> python3 -m doctest lab08.py
For Windows users, please use py or python instead of python3.
________________
Required Questions
DO NOT IMPORT ANY PACKAGES.
No input validation is required. You can assume all inputs will be as specified in the writeup below


Another idea for a product your company could develop is video games. You decided to write a few practice games just to test the waters. 




Question 1:


But first, let’s develop a simple store hierarchy, so that you can sell your products to Beta-customers.You are given the Main_Store and Branch classes with a broken code but correct doctests. You need to fix and submit a working version of these classes. You should not change the doctests. No rounding is required. 


You can find the broken code and the doctests in the starter file. 
 
Question 2:




  

	In this question, you will implement classes that abstract different character objects from a book called “The Hobbit”. Doctests for this question are in the method q2_doctests(). You are not required to add any additional doctests, but you can add more for your own benefit.
	

Part 1: Class Hobbit


The class Hobbit represents a generalized hobbit character inside the hobbit village. 


In the constructor (__init__), there are 4 instance attributes (properties) passed in when initialized:
* age (non-negative integer), 
* coins (non-negative integer), 
* pipeweed (non-negative integer),
* courage (non-negative integer)


You will implement 4 functions:


* barter(self, other_hobbit, item_value) attempts to purchase an item with a value of item_value from another hobbit. If the hobbit cannot afford the item with coins, they will attempt to pay with pipeweed. 1 bundle of pipeweed is equivalent to 10 gold coins. 
   * Overpayment is possible since fractional bundles of pipeweed cannot be used. 
   * It is NOT possible to combine both currencies for the same deal.
   *  Return True if we are able to make a deal, and return False otherwise.
   * Update the attributes of both hobbits accordingly, if a deal is successful (whether it be through coins or pipeweed).


        You can assume other_hobbit is a Hobbit instance and that item_value is a non-negative integer


Example:


Input
	Output
	Reason
	item_value is 34
pipeweed is 5
coins is 2
	True
	Not enough coins, so we pay with 4 pipeweed, which is equivalent to 40 coins. Deal is possible.
Then pipeweed is decreased by 4.
* Do not forget to add 4 to another hobbit pipeweed property. 
	

* go_on_adventure(self, needed_courage) determines whether a hobbit successfully completes an adventure. If the hobbit lacks sufficient courage, the method returns False. Otherwise, it returns True and deducts the needed_courage from the hobbit’s courage.
   * You can assume that needed_courage is a non-negative integer.


* payment_after_adventure(self, revenue, needed_courage, gained_courage) will update the hobbits properties after the adventure.  If we can successfully go_on_adventure, we will: 
   * add the revenue to the amount of coins we have
   *  increase  courage by gained_courage. 
      And your function returns True. If we are not able to go, return False.


* hobbit_level(self) will count the current level of the Hobbit. Each level is based on courage in blocks of 5.
Eg. Level 1: 0-4 courage
      Level 2: 5-9 courage
      Level 3: 10-14 courage
      Level 4: 15-19 courage
              etc...
   * After calculating the level, return a string in the format of 'Your hobbit is at level <level of hobbit>'. Use an actual calculated level as a result.


Part 2: Class  Common_Hobbit


The class Common_Hobbit is a subclass of Hobbit. Common_Hobbit will have almost the same properties and methods as a Hobbit class, with the exception of method barter().
* You must overwrite the barter() method and modify it such that when you deal with any hobbit that is a GrandPa_Hobbit, you lose all your coins and return the string 'GrandPa_Hobbit wins again!'
   * For any other Hobbit or Common_Hobbit objects, the functionality of barter will be the same as Hobbit’s barter functionality. You may find super() useful, do not copy/paste.


Part 3: Class GrandPa_Hobbit


The class GrandPa_Hobbit is a subclass of Hobbit. Just like in class Common_Hobbit, GrandPa_Hobbit class will have almost the same properties and methods as Hobbit, and you don’t need to redefine them. However:
* GrandPa_Hobbit hobbit_level() is different from Hobbit’s as it takes age into consideration with courage. So each level will still be based on blocks of 5, but it will be in terms of the courage + age.




Submission
By the end of this homework, you should have submitted the homework via Gradescope. You may submit more than once before the deadline; only the final submission will be graded. Stay on the submission page until the results show, to make sure that your submission is successfully processed by the Autograder. If your submission fails, the tests are not able to run and you would receive a 0.