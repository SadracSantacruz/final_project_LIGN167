Lab 03: Files and List Comprehension
Total Points: 10 (Correctness) + 1 extra credit (optional)


Due: Monday, October 21th, 11:59pm
Starter Files
Download lab03.zip. Inside the archive, you will find starter files for the questions in this lab. You can't import anything to solve the problems.
Extra Credit Opportunity


You will have the opportunity to receive a 1 point extra credit on that lab if you submit your last attempt early (refer to this section of each lab for the early submission deadline). Note: Each lab is graded out of 10 points, and you could possibly have more than 10 points in one lab.


Early Submission Date (lab03): Friday, October 18th, 11:59pm


Logistics
Using Python
When running a Python file, you can use the options on the command line to inspect your code further. Here are a few that will come in handy. If you want to learn more about other Python command-line options, take a look at the documentation. For all commands below, use py instead of python3 if you are using a Windows system.
* Using no command-line options will run the code in the file you provide and return you to the command line.
>>> python3 lab03.py
* -i: The -i option runs your Python script, then opens an interactive session. In an interactive session, you run Python code line by line and get immediate feedback instead of running an entire file all at once. To exit, type exit() into the interpreter prompt. You can also use the keyboard shortcut Ctrl-D on Linux/Mac machines or Ctrl-Z Enter on Windows.
If you edit the Python file while running it interactively, you will need to exit and restart the interpreter in order for those changes to take effect.
>>> python3 -i lab03.py
* -m doctest: Runs doctests in a particular file. Doctests are surrounded by triple quotes (""") within functions. Each test consists of >>> followed by some Python code and the expected output.
>>> python3 -m doctest lab03.py
After finishing each question, please run the doctests using the command above to check the correctness of the current question.
Special Instructions for One-Line List Comprehension
Important Note: Please read the instructions below for questions that require one-line list comprehension. If you failed to follow them, you will not receive credit on that question. Read Question 4.2 on the Style Guide Example for reference.
Incorrect
	Correct Example(s)
	Note
	lst = [...]
return lst
	return [...]
	

	lst_1 = [...]
lst_2 = [...]
return lst_1 + lst_2
	return [...] + [...]
	This is allowed for one-line requirement
	# ..... (comment)
return [...]
	

return [...] 
	Remove any comment
	

	return sum([num ** 2 for num in lst])
	You can do anything on the same line to the list comprehension, as long as everything fits in the same one line.
	



Important Requirements and Notes


   1. DO NOT IMPORT ANY PACKAGES.
   2. There are special syntax instructions for list comprehension questions (Questions 2-6).
   3. There are additional requirements for Question 6.
   4. It may be useful to add doctests when the given doctests do not cover all cases to avoid losing points from the Autograder/any hidden tests, but you are not required to add doctests in the labs.
   5. Style is not required or graded on any labs, but it’s recommended that you also follow the style guide for clean code. Method descriptions are provided in this lab.
   6. You may assume all inputs are valid.




Required Questions


Question 1:


Your team started to discuss how to handle the sensitive data coming from other members of the team. One suggestion was to encode the message and let another person decode it.


Question 1.1:
 
Given a file with encoded messages, parse through it line by line in order and return the decoded details as one string, with each decoded message in a new line. You don’t have to remove the last extra empty line from the output string. Assume there will not be empty lines in the file.


In order to decode, you must ignore: 
   * all exclamation points (!)
   * question marks (?)
   * semicolons (;)
   * dollar signs ($) 
   * Leading and trailing whitespaces.


Example: 


Input
	Output
	Reason
	    W!!hat$;’s for $lu;;n$ch???
	What’s for lunch
	Every character mentioned above is replaced by an empty string.
	

Hints:
   1. String method .strip() may be helpful. Please use it on each line to get rid of whitespaces.
   2. String method .replace() may be helpful.


Note: In the last doctest we provide another way to test for a string output without printing. Since docstring itself it’s a string, if we only have \n then that is literally a newline character in the string. Now, Python needs to interpret that line as real code, so having a new line character inside would mean that we want the real \ character, so you need to escape the character by putting \\. Here is some helpful reading.


def keep_a_secret(filename):
    """
    >>> print(keep_a_secret('files/encoded_1.txt').strip())
    jack reacher
    23@4 b#l31oo%m@^ way
    FSD@si%m3~on fis#he%r
    121 rockefeller avenue
    32'1 fulleH##r "dr^i~v@e
    @@4:)5#0p1m#
    7/29 06.45
    >>> print(keep_a_secret('files/encoded_2.txt').strip())
    kurt hendricks
    simon 1p@egg
    @kremlin office
    b%i>%g@ be>n @lond#o&&n
    moscow
    @reykj@av>>ik:/
    12:50 23/11
    >>> print(keep_a_secret('files/encoded_3.txt').strip())
    <BLANKLINE>
   >>> keep_a_secret('files/encoded_4.txt').strip()
    'kurt hendricks\\nsimon 1p@egg'
    """


Question 1.2:


There is another idea, how to keep the data even safer: the actual information is only contained in certain lines of the files. 


Write another function that works just like the function above but also takes an additional parameter skip (as a positive integer) that will tell you how many lines to skip through as you parse through the file. Return the string containing the actual required information.




Input
	Lines to keep/skip
	File format:
Line 1
Line 2
Line 3
Line 4
Line 5
skip = 1
	Line 1 → keep
Line 2 → skip
Line 3 → keep
Line 4 → skip
Line 5 → keep
	skip = 2
	Line 1 → keep
Line 2 → skip
Line 3 → skip
Line 4 → keep
Line 5 → skip
	



def skipped_lines(filename, skip_step):
    """
    >>> print(skipped_lines('files/encoded_1.txt', 1).strip())
    jack reacher
    FSD@si%m3~on fis#he%r
    32'1 fulleH##r "dr^i~v@e
    7/29 06.45
    >>> print(skipped_lines('files/encoded_2.txt', 2).strip())
    kurt hendricks
    b%i>%g@ be>n @lond#o&&n
    12:50 23/11
    >>> print(skipped_lines('files/encoded_3.txt', 1).strip())
    <BLANKLINE>
    >>> skipped_lines('files/encoded_4.txt', 0).strip()
    'kurt hendricks\\nsimon 1p@egg'
    """


Requirements for the rest of the questions in the lab:


Your implementation should only return an expression. Your implementation should fit in exactly one line, and break into multiple lines if space is limited.
   * No explicit loops (for loop or while loop) are allowed. 
   * Do NOT add any inline comments.
   * There are examples of correct syntax at the top of the writeup.




Question 2:


Now that your team has a secure way to communicate, it's time to talk about money! 


Question 2.1:     


It turns out you have a lot of loose change lying around, and it needs to be organized. Write a function that takes a list of positive integers (representing the change in cents) and returns another list where each integer is converted to dollar and cent amounts as a string. See the doctests for the exact format. 


Requirements


Hint:
   * Think how you can utilize the integer division and mod operation here. 


def loose_change(cents_lst):
    """
    >>> loose_change([200, 456])
    ['2 dollar(s) and 0 cents', '4 dollar(s) and 56 cents']
    >>> loose_change([9])
    ['0 dollar(s) and 9 cents']
    >>> loose_change([])
    []
    >>> loose_change([7, 77, 777, 7777])
    ['0 dollar(s) and 7 cents', '0 dollar(s) and 77 cents', '7 dollar(s) \
and 77 cents', '77 dollar(s) and 77 cents']
    """


Question 2.2:  


Your financial adviser also mentioned that she would like to know how much cash you have, but she doesn't care about the cents in each amount.


Write a function that takes a list of positive integers (representing the change in cents) and returns the total amount of money (in dollars), discarding the cents in each amount.


Example:


Input
	Output
	Reason
	[30, 345, 5678, 12908]
	188
	- 30 cents are ignored since the value is less than a dollar. (or you can think of it as giving us 0 dollars)
- 345 gives us 3 dollars (45 cents are discarded)
- 5678 gives us 56 dollars (78 cents are discarded)
- 12908 gives us 129 dollars (8 cents are discarded)
- 56 + 129 + 3 = 188
	

def ignore_cents(cents_lst):
    """
    >>> ignore_cents([20, 46, 24])
    0
    >>> ignore_cents([])
    0
    >>> ignore_cents([120, 746, 3224, 15])
    40
    """


Question 2.3:  


Another request from the financial adviser is to ignore small amounts of cash, as well as the cents. 


Write a function that takes a list of positive integers (representing the change in cents) and returns the total amount of money (in dollars), ignoring any amounts strictly less than $50 and discarding the cents in each amount.


Example:


Input
	Output
	Reason
	[30, 345, 5678, 12908]
	185
	- 30 and 345 are ignored since their values are less than $50 dollars
- 5678 gives us 56 dollars (78 cents are discarded)
- 12908 gives us 129 dollars (8 cents are discarded)
- 56 + 129 = 185
	

Requirements


def ignore_cents_and_small_amount(cents_lst):
    """
    >>> ignore_cents_and_small_amount([34, 245, 6678, 16608])
    232
    >>> ignore_cents_and_small_amount([120, 746, 3224, 15])
    0
    >>> ignore_cents_and_small_amount([])
    0
    >>> ignore_cents_and_small_amount([12345, 50000, 4999])
    623
    """


Question 2.4:


Your company is preparing to work with not only dollars but also other currencies. However, let's take it one step at a time: focus on dollars for now and set the rest aside. 


Write a function that takes a list of tuples, where each tuple contains a positive integer and a string, indicating the type of a currency. 


Your function should return a list with dollar amounts, or a string ‘skip’ for other currencies. The strings are case-sensitive, meaning you should only check for ‘dollars’ but not ‘DOLLARS’, ‘Dollars’, etc. 


Requirements


def keep_dollars_only(money_list):
    """
    >>> keep_dollars_only([(150, "dollars"), (80, "euros"), (120, "euros")])
    [150, 'skip', 'skip']
    >>> keep_dollars_only([(133, "euros"), (72, "rubles"), (120, "renminbi")])
    ['skip', 'skip', 'skip']
    >>> keep_dollars_only([(19, "dollars"), (275, "dollars"), (100, "dollars")])
    [19, 275, 100]
    """


Question 3:


And now, what about the salaries?! It’s not easy to determine how much to pay each team member, so everyone has recorded the amount they’d like to receive. This information is saved as a list of tuples:


[
    ("Marina", "Langlois", "1000"), 
    ("Anastasya", "1500"), 
    ("Kamala", "Devi", "Harris", "2578"),
    ("Donald", "Trump", "2580"),
]


Sometimes it is convenient to work with each string individually, so need to convert a list of tuples to a list of strings:


["Marina", "Langlois", "1000", "Anastasya", "1500", "Kamala", "Devi", "Harris", "2578", "Donald", "Trump", "2580"]


Write a function that takes a list of tuples described above and returns a list of strings from each tuple. Note the tuples don’t necessarily have length 2.


Requirements


def combine_the_strings(names_and_salaries):
    """
    >>> combine_the_strings([("Tom", "Cruise"), ("Jon", "Voight"),("Henry",)])
    ['Tom', 'Cruise', 'Jon', 'Voight', 'Henry']
    >>> combine_the_strings([()])
    []
    >>> combine_the_strings([])
    []
    >>> combine_the_strings([("Marina", "Langlois")])
    ['Marina', 'Langlois']
    """


Question 4:         


Let’s look closer at the names: some have rare letters in them, need to find who is who!


Write a function that takes two parameters:
   * A list of strings, where each string inside the list will have exactly two non-empty strings separated by a space.
   * A single character, char. 


Your function should  return a string with the first name only if his/hers last name contains char (case-insensitive).


Example:


Input
	Output
	Reason
	['Marina Langlois', 'Penélope Cruz']
char is 'z'
	['Penélope]
	Only the second name has “z” in its last name.
	

Requirements


Hint: String methods .split() may be helpful.


def selected_name(names, char):
    """
    >>> selected_name(['Marina Langlois', 'James Bond', 'Austin Madden'], ‘E’)
    ['Austin']
    >>> selected_name(['Martina Sampson', 'Jill Gordon', 'Cary Barber'], ‘s’)
    ['Martina']
    >>> selected_name(['Dana Donaldson', 'Selma Owen'], ‘Z’)
    []
    """


Question 5:


Finally, the pay range was announced, and team members had mixed reactions. Given a list of numbers (either integers or floats), return the list of reactions using the threshold reference table below.


Notes: If you are stuck on how to use multiple if-else conditions in a list comprehension check this file Multiple If Else Conditions




Threshold
	Output
	 ? ≤ 1000
	'Not enough'
	1000 < ? ≤ 2000
	'Thinking'
	2000 < ?
	'Will take it'
	





REQUIREMENTS: 


def pay_reaction(proposed_salaries):
        """
        >>> pay_reaction([2200, 1400, 55, 1991])
        ['Will take it', 'Thinking', 'Not enough', 'Thinking']
        >>> pay_reaction([])
        []
        >>> pay_reaction([0.01, 100000])
        ['Not enough', 'Will take it']
        """


Question 6:


HR asked everyone to provide their age so the pay range can be reconsidered. However, each team member reported their age in months, which isn’t convenient. Your task is to help HR by converting the ages from months to years.


Important:
   * In this question, you should NOT use or reuse any other functions.  If you do, your solution will not count . The purpose of this question is to practice 2D list comprehension.


Question 6.1:


Write a function that takes a list of lists of non-negative integers, where:
   * Each list represents a department
   * Each integer represents the age in months.


Your function should return a list of lists, where each age is converted to the whole number of years (rounded down). Do not assume that all sublists are of the same length. DO NOT reuse any other functions.


Requirements


def months_to_years(ages):
    """
    >>> ages = [[119, 154, 345], [4, 61]]
    >>> months_to_years(ages)
    [[9, 12, 28], [0, 5]]
    >>> ages = [[], []]
    >>> months_to_years(ages)
    [[], []]
    >>> ages = [[200], [615, 0]]
    >>> months_to_years(ages)
    [[16], [51, 0]]
    """


Question 6.2:


Write a function that takes a list of lists of integers, where:
   * Each list represents a department
   * Each integer represents the age in months.


Your function should return a list of lists, where each age is converted to the whole number of years (rounded down). If an age is negative, replace it with 0. Do not assume that all sublists are the same length. DO NOT reuse any other functions.


Requirements


def harder_convert(ages):
    """
    >>> ages = [[119, 14, -34], [5, -177, -232, 362]]
    >>> harder_convert(ages)
    [[9, 1, 0], [0, 0, 0, 30]]
    >>> ages = [[], []]
    >>> harder_convert(ages)
    [[], []]
    >>> ages = [[132], [-65, 0]]
    >>> harder_convert(ages)
    [[11], [0, 0]]
    """




Question 6.3:


Finally, write a function that takes a list of lists of integers, where:
   * Each list represents a department
   * Each integer represents the age in months.


Your function should return the number of people who are 30 years old or older. Do not assume that all sublists are of the same length. DO NOT reuse any other functions.


Requirements


def older_than_30(ages):
    """
    >>> ages = [[120, -154, 245], [145, -360, -615, 306]]
    >>> older_than_30(ages)
    0
    >>> ages = [[8848], [779, 0]]
    >>> older_than_30(ages)
    2
    >>> ages = [[80, -854, 900], [45, 360, 15]]
    >>> older_than_30(ages)
    2
    """


Submission
You need to submit the lab via Gradescope. You may submit more than once before the deadline; only the final submission will be graded.
Follow these steps to submit your work.
Important: If you used Visual Studio Code as your editor, please double check if there are weird import statements that you don’t recognize before submitting. Make sure to remove these as they will fail Gradescope runs!