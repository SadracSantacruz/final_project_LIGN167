Lab 07: Recursion and Introduction to Classes


Total Points: 10 (Correctness) + 1 extra credit (optional)
Due: Monday, November 18th, 11:59 pm


Extra Credit Opportunity


You have the opportunity to receive a 1 point extra credit on that lab if you submit your last attempt early (refer to this section of each lab for the early submission deadline). Note: Each lab is graded out of 10 points, and you could possibly have more than 10 points in one lab.


Early Submission Date (lab07): Friday, November 15th, 11:59pm


Starter Files
Download lab07.zip Inside the archive, you will find starter files for the questions in this lab. You can't import anything to solve the problems.
Submission
By the end of this lab, you should have submitted the lab via Gradescope. You may submit more than once before the deadline; only the final submission will be graded.


Introduction:


So far most of the problems we solved used the same pattern:


if condition:
    Base case (maybe more cases)
else:
    Recursive step (maybe multiple)


But sometimes a recursive step can be placed before any actions are taken. The following example takes you through the logic of this approach. 


Example:


Write a recursive function that takes a list of integers, and returns a new list with each element doubled. In the first recursion lecture, we have introduced a solution:


def double_list(lst):
    if len(lst) == 0:
        return []
    return [lst[0] * 2] + double_list(lst[1:])


The concern for this solution is time complexity. When Python concatenates two lists using the + operation, it essentially makes a new list and copies all elements one by one. (remember, “+” returns a copy). This makes each recursive call copy the entire length of the current list, which brings the time complexity from O(n) to O(n^2) (see Notes.1).


Is there an approach that doesn’t involve copying? Yes, if we remember that the built-in append() mutates a list. In the following solution, we made the recursive call to get “the remaining list doubled” first, and then added the current number to the list.


def double_list(lst):
    if len(lst) == 0:
        return []


    remaining = double_list(lst[:-1])  # get remaining information first
    remaining.append(lst[-1] * 2)  # adds to the growing list in O(1)
    return remaining


In the environment diagram, consecutive recursion calls are made without processing any information first, until it gets to the base case, where an empty list is returned. Then we are always appending to the same list object and returning that object. In total, only 1 new list object is created, and all appends happen in O(1). You may use Python Tutor to visualize the code execution.
  



Important Takeaway: Recursive calls don’t have to be in the return statement, but can be anywhere, especially if you need information from the remaining list elements to process the result for this call. 


Notes: 
1. In this class, we won’t make restrictions on how the recursion questions need to be solved or the time complexity of your solution, but some questions might be solved only if you make recursive call(s) first.
2. You will learn about the reason and mathematical derivations in DSC 40B, time complexity questions in this class will not involve tricky unrolling recursions. You will at most be expected to know recursion time complexity regarding the number of calls (i.e. each call will be O(1));
3. The total complexity of the solution above is still O(n^2), instead of the expected O(n). If you’re interested, read on to the Optional part;
4. In the real-world setting, you will need to choose from recursive functions and iterative functions. This example shows that in the doubling list situation, looping through the list is much easier than trying to craft a recursive function of the same time complexity, due to some Python details. Some algorithms, however, are much easier when you think recursively, as you will learn in DSC 30 and DSC 40B.


(Optional) Another detail occurs on the line of recursive call, because list slicing is taking linear time. In order to make the total time complexity O(n), you will need to introduce another argument indicating the index of the number processed in the current call to avoid slicing. This is not possible in our questions because in most cases if you’re not allowed to use a helper function, the header of the function will only be double_list(lst)


def double_list(lst, cur_idx=None):
    if cur_idx is None:
        cur_idx = len(lst) - 1
    elif cur_idx < 0:  # modified base case
        return []


    remaining = double_list(lst, cur_idx - 1)  # get remaining information first
    remaining.append(lst[cur_idx])  # adds to the growing list in O(1)
    return remaining






Testing
After finishing each question, run the file with the following command-line options to avoid compile time errors and test the correctness of your implementation:
* No options: >>> python3 lab07.py
* Interactive mode:  >>> python3 -i lab07.py
* Doctest (Recommended): >>> python3 -m doctest lab07.py
For Windows users, please use py or python instead of python3.
Required Questions
DO NOT IMPORT ANY PACKAGES.


Did you miss recursion?
  



Remember the competition your team members had a while back? Well, it is time for revenge! 


Question 1:  


But first, let's solve the classic problem of recursively finding the maximum element in an iterable (say, to determine a winner). 


Write a recursive function that takes a non-empty tuple of integers and returns the maximum value in the tuple.
 
Requirements:
* No built-in functions (len() is fine).
* The function must be recursive.
* No loops/list comprehension/map/filter allowed. No helper/inner function allowed.


Hint: 
* You might need to do the recursive call first, and do some processing after.


def max_recursion(tup):
    """
    >>> max_recursion((1,2,3,4))
    4
    >>> max_recursion((13,2,3,4))
    13
    >>> max_recursion((13,2,33,4))
    33
    """


Question 2:


Sometimes we need to find the smallest score to determine the winner! Write a recursive function that takes a non-empty tuple of integers and returns either the maximum or minimum value, depending on the second given parameter.


Requirements:


* Do not use built-in functions (len() is fine). No loops/list comprehension allowed.
* Do not use the solution from Question 1. Modify it instead to work with both cases.


def max_or_min_recursion(tup, find_max = True):
    """
    >>> max_or_min_recursion((1,2,3,4))
    4
    >>> max_or_min_recursion((13,2,3,4), False)
    2
    >>> max_or_min_recursion((13,2,33,-4), True)
    33
    """


Question 3:


Now, to determine the winner, we need to announce the team name, not their score. You are given a list of tuples, where the first element in each tuple is the team's name and the second element is the team's score.


Write a function find_winner that takes a list of tuples and an optional argument find_max, which is set to True by default. 
* If find_max is True, return the team with the highest score. 
* If find_max is False, return the team with the lowest score.
*  If there is a tie, return the first one in the given list.


Requirements: 
* The solution to this problem must use recursion. If you find that it's difficult to split the tuple in a single function, you are allowed to create a helper function.
* No built-in methods such as `min()`, `max()`, nor list comprehension/loops could be used in this problem (including inside the helper function). ONLY recursion will be allowed. (len() is fine)


def find_winner(record, find_max = True):
    """
    >>> find_winner([('Red',23),('Green', 49), ('Blue', 32)])
    'Green'
    >>> find_winner([('UCSD', 12.88),('SDSU', 15)], find_max=False)
    'UCSD'
    >>> find_winner([('Panda', 10), ('Koala', 10), ('Hippo', 5)], find_max=True)
    'Panda'
    """




Question 4:  From a list to a dictionary.




Write a recursive function (no loops!) that takes a list of tuples and converts it into a dictionary, where the first element of each tuple is the team name (key) and the second element is their score (value). You can assume that the tuples contain valid values. Using the len function is fine.


Hint: method update might be useful here.


def from_list_to_dict(lst):
    """
    >>> lst = [(1,2),(3,4),(5,6)]
    >>> from_list_to_dict(lst)
    {1: 2, 3: 4, 5: 6}


    >>> lst = [("one",1),("two",2)]
    >>> from_list_to_dict(lst)
    {'one': 1, 'two': 2}


    >>> lst = []
    >>> from_list_to_dict(lst)
    {}
    """


Introduction to Classes


Question 5: Fill in the blanks 




  

	We need a mascot to make our competition fun! In this question, we will begin working with a new way to represent objects: classes.
	



Create a class called Mascot that represents a mascot object. A Mascot object should return strings describing its interactions. See the doctests below for examples. You need to fill in the blanks (replace ***** with your code) to make the doctests work.


class Mascot:
    """ 
    Creates a simple Mascot class with 1 class attribute (type)
    and 3 instance attributes (color, nickname, event)
    >>> mascot1 = Mascot("blue and white", "Shark", "West Athletic Conference")
    >>> Mascot.brings
    'Luck'
    >>> mascot1.color
    'blue and white'
    >>> mascot1.sing_song("Baby Shark")
    "Shark sings 'Baby Shark' at West Athletic Conference"
    >>> mascot1.change_nickname("Doo Doo")
    >>> mascot1.nickname
    'Doo Doo'
    >>> mascot1.event
    'West Athletic Conference'




    >>> mascot2 = Mascot("green", "Stanford Tree", 'Collegiate Football Conference')
    >>> Mascot.brings
    'Luck'
    >>> mascot2.color
    'green'
    >>> mascot2.sing_song("Deck the Halls")
    "Stanford Tree sings 'Deck the Halls' at Collegiate Football Conference"
    >>> mascot2.change_nickname("The Tree")
    >>> mascot2.nickname
    'The Tree’
    """
    brings = *****
    
   
 # Initializer (Constructor) / Instance Attributes
    def *****(*****, color, nickname, event):
        *****.***** = color
        self.***** = nickname
        *****.***** = *****


    def sing_song(self, song):
        return *****


    def change_nickname (*****, new_name):
        *****.***** = *****


Question 6:


Create a class called Game that has 1 class attribute and 2 class methods. 
(Use a class Clown from the lecture as an inspiration). 


class Game:
    """
    Creates a class with 1 class attribute and two class methods


    >>> Game.mascot
    'King Triton'
    >>> Game.starts()
    'Saturday, November 2'
    >>> Game.ends()
    'Sunday, November 17'
    """
Submission:
By the end of this lab, you should have submitted the lab via Gradescope. You may submit more than once before the deadline; only the final submission will be graded.